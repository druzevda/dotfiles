""""""""""""""""""""""""""""""""""""""""""""""
" Install vim-plug if not found
if empty(glob('~/.vim/autoload/plug.vim'))
  silent !curl -fLo ~/.vim/autoload/plug.vim --create-dirs
    \ https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim
endif
" Run PlugInstall if there are missing plugins
autocmd VimEnter * if len(filter(values(g:plugs), '!isdirectory(v:val.dir)'))
  \| PlugInstall --sync | source $MYVIMRC
\| endif
""""""""""""""""""""""""""""""""""""""""""""""

call plug#begin('~/.vim/plugged')
    Plug 'machakann/vim-highlightedyank'
    Plug 'ap/vim-buftabline'
    Plug 'ap/vim-css-color'
    Plug 'tpope/vim-commentary'
    Plug 'vim/killersheep'
    Plug 'junegunn/fzf', { 'do': { -> fzf#install() } }
    Plug 'junegunn/fzf.vim'

    Plug 'xolox/vim-colorscheme-switcher'
    Plug 'xolox/vim-misc'

    Plug 'jiangmiao/auto-pairs'
    " Plug 'rstacruz/vim-closer'
    "Plug 'ctrlpvim/ctrlp.vim'
    Plug 'easymotion/vim-easymotion'
    Plug 'pbrisbin/vim-colors-off'
    Plug 'morhetz/gruvbox'
call plug#end()
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
"colorscheme off
set background=dark
highlight ColorColumn ctermbg=darkgray
set number relativenumber
syntax on

"colorscheme industry
colorscheme gruvbox
"set background=light
"set number
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
set tabstop=2
set smarttab
set shiftwidth=2
set softtabstop=2
set expandtab
set autoindent
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
set wildmenu
set wildmode=list:longest
set wildignore=*.docx,*.jpg,*.png,*.gif,*.pdf,*.pyc,*.exe,*.flv,*.img,*.xlsx,*.toc,*.aux
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
set scrolloff=99
set title
set colorcolumn=150

set ruler
set cursorline
autocmd InsertEnter,InsertLeave * set cursorline!

set nohlsearch
set incsearch
set ignorecase

set encoding=utf8
set fileencodings=utf-8,cp1251,koi8-r,cp866

set mousehide
set textwidth=120
set wrapmargin=0
set formatoptions+=t

set updatetime=2000
set autoread
autocmd FocusGained,BufEnter,CursorHold,CursorHoldI * checktime

let &t_SI = "\<Esc>[6 q"
let &t_EI = "\<Esc>[2 q"
let &t_SR = "\<Esc>[4 q"

set ttyfast
set whichwrap+=<,>,h,l,[,]

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

let mapleader = ","
map <leader> <Plug>(easymotion-prefix)
nmap f <Plug>(easymotion-overwin-f)
" map <Leader>j <Plug>(easymotion-j)
" map <Leader>k <Plug>(easymotion-k)

map <leader> :T

map <C-N> : Ag <CR>
map <C-P> : Files <CR>

map <C-j> : bn <CR>
map <C-k> : bp <CR>
map <C-h> : bd <CR>

map <leader>m :term ++curwin make<CR>
" map qq :q! <CR>
" map wq :wq <CR>

nnoremap <Up> : NextColorScheme <CR>
nnoremap <Down> : PrevColorScheme <CR>

nnoremap Y y$

nnoremap j gj
nnoremap k gk

nnoremap <space> @=((foldclosed(line('.')) < 0) ? 'zc' : 'zo')<CR>
vnoremap <Space> zf

map <leader>ll :w <CR>

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
command! -complete=shellcmd -nargs=+ T call s:RunShellCommand(<q-args>)
function! s:RunShellCommand(cmdline) abort
    exe 'vert terminal '. a:cmdline
endfunction

"autoclose for nerdtree when vim closed
autocmd BufEnter *
      \ if (winnr("$") == 1
      \ && exists("b:NERDTree")
      \ && b:NERDTree.isTabTree())
      \ | q | endif

"clear spaces and clear lines
autocmd BufWritePre * call CleanupBeforeWrite()
function! CleanupBeforeWrite()

    " Запоминаем позицию курсора
    let l:line = line('.')
    let l:col = col('.')

    " Убрать лишние пробелы на концах строк
    " % перед s означает, что нужно сразу во всём файле заменять
    :%s/\s\+$//e

    " Добавить пустые строки под конец файла
    " (нужно, чтобы правильно их усечь до одной впоследствии)
    ":$s/$/\=repeat("\r", 5)/e

    " Убрать лишние пустые строки в избыточном количестве
    :%s/\n\{5,}/\r\r/e

    " Странно, но при замене \r - это newline,
    " а \n - это null.
    " https://stackoverflow.com/questions/3965883/vim-replace-character-to-n
    " https://unix.stackexchange.com/questions/247329/vim-how-to-replace-one-new-line-n-with-two-ns

    " Оставляем только одну пустую строку под конец файла
"    :$-1,$s/\n//e

    " Возвращаем курсор в исходное положение
    call cursor(l:line, l:col)

endfunction
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
"let g:clang_format#style_options = {
"            \ "BasedOnStyle" : "Google",
"            \ "FixNamespaceComments" : "false",
"            \ "ColumnLimit" : 150,
"            \ "UseTab" : "Never",
"            \ "SpaceAfterTemplateKeyword" : "false",
"            \ "SpaceAfterCStyleCast" : "true",
"            \ "AlignConsecutiveAssignments" : "true",
"            \ "AlignTrailingComments" : "true",
"            \ "AllowShortLambdasOnASingleLine" : "false",
"            \ "AllowShortFunctionsOnASingleLine" : "false"}
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

set foldmethod=indent
set foldlevelstart=99

set nocp
filetype plugin on
" configure tags - add additional tags here or comment out not-used ones
set tags+=~/.vim/tags/curses

" build tags of your own project with CTRL+F12
"map <C-F12> :!ctags -R --c++-kinds=+p --fields=+iaS --extra=+q .<CR>
noremap <F12> :!ctags -R --c++-kinds=+p --fields=+iaS --extra=+q .<cr>
inoremap <F12> <Esc>:!ctags -R --c++-kinds=+p --fields=+iaS --extra=+q .<cr>

"''''''''''''''''''''''''''''''''''''''''''''
"let g:ctrlp_match_window = 'bottom,order:ttb'
"let g:ctrlp_switch_buffer = 0
"let g:ctrlp_working_path_mode = 0
"let g:ctrlp_user_command = 'ag %s -l --nocolor  -g ""'
"let g:ctrlp_user_command = 'ag %s -l  -g ""'

